"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.usePrevious = usePrevious;
exports.useGA = useGA;
exports.usePageViews = usePageViews;

var _react = require("react");

var _reactRouterDom = require("react-router-dom");

function usePrevious(value) {
  var ref = (0, _react.useRef)(); // didMount & didUpdate.

  (0, _react.useEffect)(function () {
    ref.current = value;
  });
  return ref.current;
}

function useGA(id) {
  var init = (0, _react.useCallback)(function () {
    if (!id) {
      console.error("[react-router-ga] Tracking ID is required.");
      return;
    }

    var currdate = new Date(); // Load Google Analytics

    (function (i, s, o, g, r, a, m) {
      i["GoogleAnalyticsObject"] = r;
      i[r] = i[r] || function () {
        (i[r].q = i[r].q || []).push(arguments);
      }, i[r].l = 1 * currdate;
      a = s.createElement(o), m = s.getElementsByTagName(o)[0];
      a.async = 1;
      a.src = g;
      m.parentNode.insertBefore(a, m);
    })(window, document, "script", "https://www.google-analytics.com/analytics.js", "ga", {}, {}); // Initialize Google Analytics


    window.ga("create", id, "auto");
  }, []); // didMount only, unless ga id changes which shouldn't happen.

  (0, _react.useEffect)(init, [id]);
}

function usePageViews(trackPathnameOnly, basename) {
  var debug = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var location = (0, _reactRouterDom.useLocation)();
  var pathname = location.pathname;
  var previousPathname = usePrevious(pathname);
  var sendPageView = (0, _react.useCallback)(function () {
    if (trackPathnameOnly && previousPathname === pathname) return; // Sets the page value on the tracker. If a basename is provided, then it is prepended to the pathname.

    var page = basename ? "".concat(basename).concat(pathname) : pathname;
    window.ga("set", "page", page); // Sending the pageview no longer requires passing the page
    // value since it's now stored on the tracker object.

    window.ga("send", "pageview");

    if (debug) {
      console.info("[react-router-ga] Page view: ".concat(page));
    }
  }, [basename, pathname, debug]); // didMount & didUpdate (when react-router-dom's location object changes).

  (0, _react.useEffect)(sendPageView, [location]);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9ob29rcy50cyJdLCJuYW1lcyI6WyJ1c2VQcmV2aW91cyIsInZhbHVlIiwicmVmIiwiY3VycmVudCIsInVzZUdBIiwiaWQiLCJpbml0IiwiY29uc29sZSIsImVycm9yIiwiY3VycmRhdGUiLCJEYXRlIiwiaSIsInMiLCJvIiwiZyIsInIiLCJhIiwibSIsInEiLCJwdXNoIiwiYXJndW1lbnRzIiwibCIsImNyZWF0ZUVsZW1lbnQiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsImFzeW5jIiwic3JjIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsIndpbmRvdyIsImRvY3VtZW50IiwiZ2EiLCJ1c2VQYWdlVmlld3MiLCJ0cmFja1BhdGhuYW1lT25seSIsImJhc2VuYW1lIiwiZGVidWciLCJsb2NhdGlvbiIsInBhdGhuYW1lIiwicHJldmlvdXNQYXRobmFtZSIsInNlbmRQYWdlVmlldyIsInBhZ2UiLCJpbmZvIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHTyxTQUFTQSxXQUFULENBQXFCQyxLQUFyQixFQUFpQztBQUN0QyxNQUFNQyxHQUFHLEdBQUcsb0JBQVosQ0FEc0MsQ0FHdEM7O0FBQ0Esd0JBQVUsWUFBTTtBQUNkQSxJQUFBQSxHQUFHLENBQUNDLE9BQUosR0FBY0YsS0FBZDtBQUNELEdBRkQ7QUFJQSxTQUFPQyxHQUFHLENBQUNDLE9BQVg7QUFDRDs7QUFFTSxTQUFTQyxLQUFULENBQWVDLEVBQWYsRUFBa0M7QUFDdkMsTUFBTUMsSUFBSSxHQUFHLHdCQUFZLFlBQU07QUFDN0IsUUFBSSxDQUFDRCxFQUFMLEVBQVM7QUFDUEUsTUFBQUEsT0FBTyxDQUFDQyxLQUFSLENBQWMsNENBQWQ7QUFDQTtBQUNEOztBQUVELFFBQU1DLFFBQWEsR0FBRyxJQUFJQyxJQUFKLEVBQXRCLENBTjZCLENBUTdCOztBQUNBLEtBQUMsVUFBU0MsQ0FBVCxFQUFpQkMsQ0FBakIsRUFBb0JDLENBQXBCLEVBQXVCQyxDQUF2QixFQUEwQkMsQ0FBMUIsRUFBNkJDLENBQTdCLEVBQXFDQyxDQUFyQyxFQUE2QztBQUM1Q04sTUFBQUEsQ0FBQyxDQUFDLHVCQUFELENBQUQsR0FBNkJJLENBQTdCO0FBQ0NKLE1BQUFBLENBQUMsQ0FBQ0ksQ0FBRCxDQUFELEdBQ0NKLENBQUMsQ0FBQ0ksQ0FBRCxDQUFELElBQ0EsWUFBVztBQUNULFNBQUNKLENBQUMsQ0FBQ0ksQ0FBRCxDQUFELENBQUtHLENBQUwsR0FBU1AsQ0FBQyxDQUFDSSxDQUFELENBQUQsQ0FBS0csQ0FBTCxJQUFVLEVBQXBCLEVBQXdCQyxJQUF4QixDQUE2QkMsU0FBN0I7QUFDRCxPQUpILEVBS0dULENBQUMsQ0FBQ0ksQ0FBRCxDQUFELENBQUtNLENBQUwsR0FBUyxJQUFJWixRQUxoQjtBQU1DTyxNQUFBQSxDQUFDLEdBQUdKLENBQUMsQ0FBQ1UsYUFBRixDQUFnQlQsQ0FBaEIsQ0FBTCxFQUEyQkksQ0FBQyxHQUFHTCxDQUFDLENBQUNXLG9CQUFGLENBQXVCVixDQUF2QixFQUEwQixDQUExQixDQUEvQjtBQUNBRyxNQUFBQSxDQUFDLENBQUNRLEtBQUYsR0FBVSxDQUFWO0FBQ0FSLE1BQUFBLENBQUMsQ0FBQ1MsR0FBRixHQUFRWCxDQUFSO0FBQ0FHLE1BQUFBLENBQUMsQ0FBQ1MsVUFBRixDQUFhQyxZQUFiLENBQTBCWCxDQUExQixFQUE2QkMsQ0FBN0I7QUFDRCxLQVpELEVBYUVXLE1BYkYsRUFjRUMsUUFkRixFQWVFLFFBZkYsRUFnQkUsK0NBaEJGLEVBaUJFLElBakJGLEVBa0JFLEVBbEJGLEVBbUJFLEVBbkJGLEVBVDZCLENBK0I3Qjs7O0FBQ0FELElBQUFBLE1BQU0sQ0FBQ0UsRUFBUCxDQUFVLFFBQVYsRUFBb0J6QixFQUFwQixFQUF3QixNQUF4QjtBQUNELEdBakNZLEVBaUNWLEVBakNVLENBQWIsQ0FEdUMsQ0FvQ3ZDOztBQUNBLHdCQUFVQyxJQUFWLEVBQWdCLENBQUNELEVBQUQsQ0FBaEI7QUFDRDs7QUFFTSxTQUFTMEIsWUFBVCxDQUNMQyxpQkFESyxFQUVMQyxRQUZLLEVBSUw7QUFBQSxNQURBQyxLQUNBLHVFQURpQixLQUNqQjtBQUNBLE1BQU1DLFFBQVEsR0FBRyxrQ0FBakI7QUFEQSxNQUVRQyxRQUZSLEdBRXFCRCxRQUZyQixDQUVRQyxRQUZSO0FBR0EsTUFBTUMsZ0JBQWdCLEdBQUdyQyxXQUFXLENBQUNvQyxRQUFELENBQXBDO0FBQ0EsTUFBTUUsWUFBWSxHQUFHLHdCQUFZLFlBQU07QUFDckMsUUFBSU4saUJBQWlCLElBQUlLLGdCQUFnQixLQUFLRCxRQUE5QyxFQUF3RCxPQURuQixDQUdyQzs7QUFDQSxRQUFNRyxJQUFJLEdBQUdOLFFBQVEsYUFBTUEsUUFBTixTQUFpQkcsUUFBakIsSUFBOEJBLFFBQW5EO0FBRUFSLElBQUFBLE1BQU0sQ0FBQ0UsRUFBUCxDQUFVLEtBQVYsRUFBaUIsTUFBakIsRUFBeUJTLElBQXpCLEVBTnFDLENBUXJDO0FBQ0E7O0FBQ0FYLElBQUFBLE1BQU0sQ0FBQ0UsRUFBUCxDQUFVLE1BQVYsRUFBa0IsVUFBbEI7O0FBRUEsUUFBSUksS0FBSixFQUFXO0FBQ1QzQixNQUFBQSxPQUFPLENBQUNpQyxJQUFSLHdDQUE2Q0QsSUFBN0M7QUFDRDtBQUNGLEdBZm9CLEVBZWxCLENBQUNOLFFBQUQsRUFBV0csUUFBWCxFQUFxQkYsS0FBckIsQ0Fma0IsQ0FBckIsQ0FKQSxDQXFCQTs7QUFDQSx3QkFBVUksWUFBVixFQUF3QixDQUFDSCxRQUFELENBQXhCO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNhbGxiYWNrIH0gZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgeyBHQVRyYWNraW5nSWQgfSBmcm9tIFwiLi90eXBlc1wiO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlUHJldmlvdXModmFsdWU6IGFueSkge1xuICBjb25zdCByZWYgPSB1c2VSZWYoKTtcblxuICAvLyBkaWRNb3VudCAmIGRpZFVwZGF0ZS5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IHZhbHVlO1xuICB9KTtcblxuICByZXR1cm4gcmVmLmN1cnJlbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VHQShpZD86IEdBVHJhY2tpbmdJZCkge1xuICBjb25zdCBpbml0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmICghaWQpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJbcmVhY3Qtcm91dGVyLWdhXSBUcmFja2luZyBJRCBpcyByZXF1aXJlZC5cIik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgY3VycmRhdGU6IGFueSA9IG5ldyBEYXRlKCk7XG5cbiAgICAvLyBMb2FkIEdvb2dsZSBBbmFseXRpY3NcbiAgICAoZnVuY3Rpb24oaTogYW55LCBzLCBvLCBnLCByLCBhOiBhbnksIG06IGFueSkge1xuICAgICAgaVtcIkdvb2dsZUFuYWx5dGljc09iamVjdFwiXSA9IHI7XG4gICAgICAoaVtyXSA9XG4gICAgICAgIGlbcl0gfHxcbiAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgKGlbcl0ucSA9IGlbcl0ucSB8fCBbXSkucHVzaChhcmd1bWVudHMpO1xuICAgICAgICB9KSxcbiAgICAgICAgKGlbcl0ubCA9IDEgKiBjdXJyZGF0ZSk7XG4gICAgICAoYSA9IHMuY3JlYXRlRWxlbWVudChvKSksIChtID0gcy5nZXRFbGVtZW50c0J5VGFnTmFtZShvKVswXSk7XG4gICAgICBhLmFzeW5jID0gMTtcbiAgICAgIGEuc3JjID0gZztcbiAgICAgIG0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSwgbSk7XG4gICAgfSkoXG4gICAgICB3aW5kb3csXG4gICAgICBkb2N1bWVudCxcbiAgICAgIFwic2NyaXB0XCIsXG4gICAgICBcImh0dHBzOi8vd3d3Lmdvb2dsZS1hbmFseXRpY3MuY29tL2FuYWx5dGljcy5qc1wiLFxuICAgICAgXCJnYVwiLFxuICAgICAge30sXG4gICAgICB7fVxuICAgICk7XG5cbiAgICAvLyBJbml0aWFsaXplIEdvb2dsZSBBbmFseXRpY3NcbiAgICB3aW5kb3cuZ2EoXCJjcmVhdGVcIiwgaWQsIFwiYXV0b1wiKTtcbiAgfSwgW10pO1xuXG4gIC8vIGRpZE1vdW50IG9ubHksIHVubGVzcyBnYSBpZCBjaGFuZ2VzIHdoaWNoIHNob3VsZG4ndCBoYXBwZW4uXG4gIHVzZUVmZmVjdChpbml0LCBbaWRdKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhZ2VWaWV3cyhcbiAgdHJhY2tQYXRobmFtZU9ubHk6IGJvb2xlYW4sXG4gIGJhc2VuYW1lOiBzdHJpbmcsXG4gIGRlYnVnOiBib29sZWFuID0gZmFsc2Vcbikge1xuICBjb25zdCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGNvbnN0IHsgcGF0aG5hbWUgfSA9IGxvY2F0aW9uO1xuICBjb25zdCBwcmV2aW91c1BhdGhuYW1lID0gdXNlUHJldmlvdXMocGF0aG5hbWUpO1xuICBjb25zdCBzZW5kUGFnZVZpZXcgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgaWYgKHRyYWNrUGF0aG5hbWVPbmx5ICYmIHByZXZpb3VzUGF0aG5hbWUgPT09IHBhdGhuYW1lKSByZXR1cm47XG5cbiAgICAvLyBTZXRzIHRoZSBwYWdlIHZhbHVlIG9uIHRoZSB0cmFja2VyLiBJZiBhIGJhc2VuYW1lIGlzIHByb3ZpZGVkLCB0aGVuIGl0IGlzIHByZXBlbmRlZCB0byB0aGUgcGF0aG5hbWUuXG4gICAgY29uc3QgcGFnZSA9IGJhc2VuYW1lID8gYCR7YmFzZW5hbWV9JHtwYXRobmFtZX1gIDogcGF0aG5hbWU7XG5cbiAgICB3aW5kb3cuZ2EoXCJzZXRcIiwgXCJwYWdlXCIsIHBhZ2UpO1xuXG4gICAgLy8gU2VuZGluZyB0aGUgcGFnZXZpZXcgbm8gbG9uZ2VyIHJlcXVpcmVzIHBhc3NpbmcgdGhlIHBhZ2VcbiAgICAvLyB2YWx1ZSBzaW5jZSBpdCdzIG5vdyBzdG9yZWQgb24gdGhlIHRyYWNrZXIgb2JqZWN0LlxuICAgIHdpbmRvdy5nYShcInNlbmRcIiwgXCJwYWdldmlld1wiKTtcblxuICAgIGlmIChkZWJ1Zykge1xuICAgICAgY29uc29sZS5pbmZvKGBbcmVhY3Qtcm91dGVyLWdhXSBQYWdlIHZpZXc6ICR7cGFnZX1gKTtcbiAgICB9XG4gIH0sIFtiYXNlbmFtZSwgcGF0aG5hbWUsIGRlYnVnXSk7XG5cbiAgLy8gZGlkTW91bnQgJiBkaWRVcGRhdGUgKHdoZW4gcmVhY3Qtcm91dGVyLWRvbSdzIGxvY2F0aW9uIG9iamVjdCBjaGFuZ2VzKS5cbiAgdXNlRWZmZWN0KHNlbmRQYWdlVmlldywgW2xvY2F0aW9uXSk7XG59XG4iXX0=